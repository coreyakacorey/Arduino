/***********   nRF24L01 Receiver code   ***********
 Received data from an nRF24L01 transmitter to drive 
 an RC car. Takes input from 2 joysticks, JS1 for 
 forward/backward and JS2 for left/right. For use with
 Arduino.

  
  Created By: Corey Ankney
  Date: Oct 2022
****************************************************/

//Libraries
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

//Motor connections
#define AIN1 5
#define AIN2 3
#define BIN1 6
#define BIN2 7

//RF24 object
RF24 radio(10,8); //CE, CSN

//Communication address
const byte address[6] = "00001"; //C string with 5 chars + terminal char "\0"

//Structure containing all input variables to be received
struct Data_Package{
  byte js1X;     //Joystick 1 x-axis
  byte js1Y;     //Joysitck 1 y-axis
  byte js1Btn;   //Joystick 1 button
  byte js2X;     //Joystick 2 x-axis
  byte js2Y;     //Joysitck 2 y-axis
  byte js2Btn;   //Joystick 2 button
};

//Variable to hold structured data to be received
Data_Package data;

void setup(){

  //For debugging
  //Serial.begin(9600);
  
  //Start the radio object
  radio.begin();

  //Set motor connections to ouput to drive motors
  pinMode(AIN1,OUTPUT);
  pinMode(AIN2,OUTPUT);
  pinMode(BIN1,OUTPUT);
  pinMode(BIN2,OUTPUT);

  //Set the comm address (pipe# [0-5], address)
  radio.openReadingPipe(0, address);

  //Radio settings
  radio.setAutoAck(false); //Receive data without waiting for acknowledgement
  radio.setDataRate(RF24_250KBPS); //Lowest data rate, farthest range
  //radio.setPALevel(RF24_PA_MIN); //(optional)Set power amplifier to minimum level
  
  //Set to receiver mode
  radio.startListening();
}

void loop(){
  
  //Check for available data
  if(radio.available()){
    radio.read(&data, sizeof(data)); //Read data into structured variable "data"

    //Debug output
    /*Serial.print("JS1x: ");
    Serial.print(data.js1X);
    Serial.print(" JS1y: ");
    Serial.print(data.js1Y);
    Serial.print(" JS1btn: ");
    Serial.print(data.js1Btn);
    Serial.print(" JS2x: ");
    Serial.print(data.js2X);
    Serial.print(" JS2y: ");
    Serial.print(data.js2Y);
    Serial.print(" JS2btn: ");
    Serial.println(data.js2Btn);*/

    //Movement statments, turn conditions are higher priority that forward or backward conditions
    //Turn left from stop
    if(data.js2X > 140 && data.js1Y < 140 && data.js1Y > 100 ){
      left();
    }
    //Turn left during forward movement
    else if(data.js2X > 140 && data.js1Y < 100){
      left();
    }

    //Turn right from stop
    else if(data.js2X < 100 && data.js1Y < 140 && data.js1Y > 100){
      right();
    }
    //Turn right during forward movement
    else if(data.js2X < 100 && data.js1Y < 100){
      right();
    }
    
    else if(data.js1Y < 100 && data.js2X < 140 && data.js2X > 100 ){
       forward();
    }
    else if(data.js1Y > 140 && data.js2X < 140 && data.js2X > 100){
      reverse();
    }

    //Stop motor when joysticks are in center position
    else{
      motorsStop();
    }
  }
}

void left(){
  digitalWrite(AIN1,HIGH); //Set motor direction
  analogWrite(AIN1,data.js2X); //Vary motor speed with PWM signal proportional to JS input value
  digitalWrite(BIN1,LOW); //Disable motor
  digitalWrite(BIN2,LOW);
}

void right(){
  digitalWrite(BIN1,HIGH);
  analogWrite(BIN2,data.js2X);
  digitalWrite(AIN1,LOW);
  digitalWrite(AIN2,LOW);
}

void forward(){
  digitalWrite(AIN1,HIGH);
  digitalWrite(BIN1,HIGH);  
  analogWrite(AIN2,data.js1Y);
  analogWrite(BIN2,data.js1Y);
}

void reverse(){
  digitalWrite(AIN2,HIGH);
  digitalWrite(BIN2,HIGH); 
  analogWrite(AIN2,data.js1Y);
  analogWrite(BIN2,data.js1Y);
}

void motorsStop(){
  digitalWrite(AIN1,LOW); 
  digitalWrite(AIN2,LOW);
  digitalWrite(BIN1,LOW); 
  digitalWrite(BIN2,LOW);
}

